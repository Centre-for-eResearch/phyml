<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>nz.org.nesi</groupId>
	<artifactId>phyml-gui</artifactId>
	<packaging>jar</packaging>
	<version>0.8-SNAPSHOT</version>
	<name>phyml-gui</name>

	<!--<parent>-->
		<!--<groupId>nz.org.nesi</groupId>-->
		<!--<artifactId>nesi</artifactId>-->
		<!--<version>1.0</version>-->
	<!--</parent>-->

	<!--<repositories>-->
		<!--<repository>-->
			<!--<id>bestgrid.public.release</id>-->
			<!--<url>http://code.nesi.org.nz/nexus/content/groups/public/</url>-->
			<!--<releases>-->
				<!--<enabled>true</enabled>-->
				<!--<updatePolicy>daily</updatePolicy>-->
				<!--<checksumPolicy>warn</checksumPolicy>-->
			<!--</releases>-->
			<!--<snapshots>-->
				<!--<enabled>false</enabled>-->
				<!--<updatePolicy>always</updatePolicy>-->
				<!--<checksumPolicy>fail</checksumPolicy>-->
			<!--</snapshots>-->
		<!--</repository>-->
	<!--</repositories>-->


	<dependencies>

		<!-- the main grisu dependency. -->
		<!-- comment this and uncomment the 'grisu-client' dependency below if you don't need the swing dependencies -->
		<!--<dependency>-->
			<!--<groupId>grisu.frontend</groupId>-->
			<!--<artifactId>grisu-client-swing</artifactId>-->
			<!--<version>${grisu.version}</version>-->
			<!--<type>jar</type>-->
			<!--<scope>compile</scope>-->
			<!--<exclusions>-->
				<!--<exclusion>-->
					<!--<artifactId>jgoodiesforms</artifactId>-->
					<!--<groupId>com.jgoodies</groupId>-->
				<!--</exclusion>-->
			<!--</exclusions>-->
		<!--</dependency>-->

<!-- 		<dependency> -->
<!-- 			<groupId>grisu.frontend</groupId> -->
<!-- 			<artifactId>grisu-client</artifactId> -->
<!-- 			<version>${grisu.version}</version> -->
<!-- 			<type>jar</type> -->
<!-- 			<scope>compile</scope> -->
<!-- 		</dependency> -->

		<!-- we can't include the bouncy castle library in our assembled binary
			so it has to put in the classpath in some other way. You could either have
			the bcprov jar in the same directory as your executable jar, or you just
			do nothing. Grisu will try to download it in the background and put it in
			the classpath once your application is executed the first time... -->
		<!--<dependency>-->
			<!--<groupId>bouncycastle</groupId>-->
			<!--<artifactId>bcprov-jdk15</artifactId>-->
			<!--<version>145</version>-->
			<!--<type>jar</type>-->
			<!--<scope>provided</scope>-->
		<!--</dependency>-->

		<!-- further grisu dependencies, incuded by default but can be enabled/disabled
			if not needed and you want a smaller assembly -->
		<!-- the grisu-core dependency is needed when you want to connect to a
			local backend (which is the only supported backend for grisu 0.3 at the moment -->
		<!-- <dependency>
			<groupId>grisu.backend</groupId>
			<artifactId>grisu-core</artifactId>
			<version>${grisu.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>-->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>com.intellij</groupId>
			<artifactId>forms_rt</artifactId>
			<version>7.0.3</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.3.12</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.0.1</version>
		</dependency>
		<!-- test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<plugins>

			<!-- replace version in file -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.3.2</version>
				<executions>
					<execution>
						<!-- the replace should happen before the app is packaged -->
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<includes>
						<!-- replace the token in this file -->
						<include>target/classes/this-client.version</include>
					</includes>
					<regex>false</regex>
					<!-- the name of the token to replace -->
					<token>VERSION_TOKEN</token>
					<!-- replace it with the maven project version -->
					<value>${project.version}</value>
				</configuration>
			</plugin>

			<!-- you can disable the assembly plugin if you want, your builds will
				be faster I find it quite handy to have maven build an executable jar, though -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<configuration>

							<descriptors>
								<descriptor>client.assembly.xml</descriptor>
							</descriptors>
							<finalName>phyml-gui</finalName>
							<archive>
								<index>true</index>
								<manifest>
									<mainClass>phyml.PhymlMain</mainClass>
								</manifest>
							</archive>

						</configuration>
						<goals>
							<goal>attached</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.4</version>
				<!-- <inherited>false</inherited> -->
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<pushChanges>true</pushChanges>
					<localCheckout>true</localCheckout>
					<tagNameFormat>@{project.version}</tagNameFormat>
				</configuration>
			</plugin>
		</plugins>
	</build>


	<scm>
		<url>https://github.com/stephaneguindon/phyml</url>
		<connection>scm:git:git@github.com:stephaneguindon/phyml.git</connection>
		<developerConnection>scm:git:git@github.com:stephaneguindon/phyml.git</developerConnection>
		<tag>HEAD</tag>
	</scm>
	<issueManagement>
		<system>Github</system>
		<url>https://github.com/stephaneguindon/phyml/issues</url>
	</issueManagement>
</project>

